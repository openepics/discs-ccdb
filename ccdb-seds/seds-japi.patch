diff --git a/seds-japi/src/main/java/org/openepics/seds/core/BaseValidator.java b/seds-japi/src/main/java/org/openepics/seds/core/BaseValidator.java
index f68d2c8..b4526f1 100644
--- a/seds-japi/src/main/java/org/openepics/seds/core/BaseValidator.java
+++ b/seds-japi/src/main/java/org/openepics/seds/core/BaseValidator.java
@@ -1,11 +1,11 @@
-/* 
+/*
  * This software is Copyright by the Board of Trustees of Michigan
  *  State University (c) Copyright 2013, 2014.
- *  
+ *
  *  You may use this software under the terms of the GNU public license
  *  (GPL). The terms of this license are described at:
  *    http://www.gnu.org/licenses/gpl.txt
- *  
+ *
  *  Contact Information:
  *       Facility for Rare Isotope Beam
  *       Michigan State University
@@ -14,14 +14,17 @@
  */
 package org.openepics.seds.core;
 
-import com.github.fge.jsonschema.core.report.ProcessingReport;
+import static org.openepics.seds.util.SedsException.assertNotNull;
+import static org.openepics.seds.util.ValidationUtil.validate;
+
 import javax.json.JsonObject;
+
 import org.openepics.seds.api.SedsValidator;
 import org.openepics.seds.api.datatypes.SedsMetadata;
 import org.openepics.seds.util.SedsException;
-import static org.openepics.seds.util.SedsException.assertNotNull;
-import static org.openepics.seds.util.ValidationUtil.validate;
 import org.openepics.seds.util.ValueUtil;
+
+import com.github.fge.jsonschema.core.report.ProcessingReport;
 
 /**
  *
@@ -36,37 +39,37 @@
     @Override
     public boolean isValidSEDS(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (meta and raw)");
-        return validate(ValueUtil.SCHEMA_SEDS_TYPE, instance).isSuccess();
+        return validate(ValueUtil.SCHEMA_SEDS_TYPE, ValueUtil.SCHEMA_SEDS_TYPE_PATH, instance).isSuccess();
     }
 
     @Override
     public boolean isValidSEDSRaw(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (raw)");
-        return validate(ValueUtil.SCHEMA_SEDS_RAW, instance).isSuccess();
+        return validate(ValueUtil.SCHEMA_SEDS_RAW, ValueUtil.SCHEMA_SEDS_RAW_PATH, instance).isSuccess();
     }
 
     @Override
     public boolean isValidSEDSMeta(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (meta)");
-        return validate(ValueUtil.SCHEMA_SEDS_META, instance).isSuccess();
+        return validate(ValueUtil.SCHEMA_SEDS_META, ValueUtil.SCHEMA_SEDS_META_PATH, instance).isSuccess();
     }
 
     @Override
     public ProcessingReport validateSEDS(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (meta and raw)");
-        return validate(ValueUtil.SCHEMA_SEDS_TYPE, instance);
+        return validate(ValueUtil.SCHEMA_SEDS_TYPE, ValueUtil.SCHEMA_SEDS_TYPE_PATH, instance);
     }
 
     @Override
     public ProcessingReport validateSEDSRaw(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (raw)");
-        return validate(ValueUtil.SCHEMA_SEDS_RAW, instance);
+        return validate(ValueUtil.SCHEMA_SEDS_RAW, ValueUtil.SCHEMA_SEDS_RAW_PATH, instance);
     }
 
     @Override
     public ProcessingReport validateSEDSMeta(JsonObject instance) throws SedsException {
         assertNotNull(instance, JsonObject.class, "Validating SEDS (meta)");
-        return validate(ValueUtil.SCHEMA_SEDS_META, instance);
+        return validate(ValueUtil.SCHEMA_SEDS_META, ValueUtil.SCHEMA_SEDS_META_PATH, instance);
     }
 
     @Override
diff --git a/seds-japi/src/main/java/org/openepics/seds/util/SedsException.java b/seds-japi/src/main/java/org/openepics/seds/util/SedsException.java
index 2fb5bad..90d20a4 100644
--- a/seds-japi/src/main/java/org/openepics/seds/util/SedsException.java
+++ b/seds-japi/src/main/java/org/openepics/seds/util/SedsException.java
@@ -1,11 +1,11 @@
-/* 
+/*
  * This software is Copyright by the Board of Trustees of Michigan
  *  State University (c) Copyright 2013, 2014.
- *  
+ *
  *  You may use this software under the terms of the GNU public license
  *  (GPL). The terms of this license are described at:
  *    http://www.gnu.org/licenses/gpl.txt
- *  
+ *
  *  Contact Information:
  *       Facility for Rare Isotope Beam
  *       Michigan State University
@@ -14,9 +14,9 @@
  */
 package org.openepics.seds.util;
 
-import com.github.fge.jsonschema.core.report.ProcessingReport;
-import java.io.File;
 import javax.json.JsonObject;
+
+import com.github.fge.jsonschema.core.report.ProcessingReport;
 
 /**
  * An exception that may contain data about when an exception occurred due to
@@ -36,7 +36,7 @@
 
     private ProcessingReport report = null;
     private JsonObject json = null;
-    private File schema = null;
+    private String schemaPath = null;
 
     //Constructors
     //--------------------------------------------------------------------------
@@ -105,12 +105,12 @@
     /**
      * Sets the JSON schema of the exception.
      *
-     * @param schema '.json' file containing a JSON schema, the schema being
+     * @param schemaPath '.json' file containing a JSON schema, the schema being
      * processed at the time of the exception
      * @return this
      */
-    public SedsException attachSchema(File schema) {
-        this.schema = schema;
+    public SedsException attachSchemaPath(String schemaPath) {
+        this.schemaPath = schemaPath;
         return this;
     }
     //--------------------------------------------------------------------------
@@ -143,10 +143,10 @@
      * Note that an error could have occurred if the file does not exist, or
      * does not contain a valid JSON schema.
      *
-     * @return '.json' file containing a JSON schema
+     * @return a path to '.json' file containing a JSON schema
      */
-    public File getSchema() {
-        return schema;
+    public String getSchemaPath() {
+        return schemaPath;
     }
     //--------------------------------------------------------------------------
 
@@ -176,7 +176,7 @@
      * @return true if there is an attached JSON schema, otherwise false
      */
     public boolean hasSchema() {
-        return schema != null;
+        return schemaPath != null;
     }
     //--------------------------------------------------------------------------
 
@@ -199,7 +199,7 @@
                 .append("\n[JSON]\n")
                 .append(json == null ? null : json.toString())
                 .append("[\nSchemaFile]\n")
-                .append(schema == null ? null : schema.getPath())
+                .append(schemaPath)
                 .append("\n----------")
                 .toString();
     }
diff --git a/seds-japi/src/main/java/org/openepics/seds/util/ValidationUtil.java b/seds-japi/src/main/java/org/openepics/seds/util/ValidationUtil.java
index a803501..7c0fa9c 100644
--- a/seds-japi/src/main/java/org/openepics/seds/util/ValidationUtil.java
+++ b/seds-japi/src/main/java/org/openepics/seds/util/ValidationUtil.java
@@ -1,11 +1,11 @@
-/* 
+/*
  * This software is Copyright by the Board of Trustees of Michigan
  *  State University (c) Copyright 2013, 2014.
- *  
+ *
  *  You may use this software under the terms of the GNU public license
  *  (GPL). The terms of this license are described at:
  *    http://www.gnu.org/licenses/gpl.txt
- *  
+ *
  *  Contact Information:
  *       Facility for Rare Isotope Beam
  *       Michigan State University
@@ -14,16 +14,19 @@
  */
 package org.openepics.seds.util;
 
+import static org.openepics.seds.util.SedsException.assertNotNull;
+
+import java.io.IOException;
+
+import javax.json.JsonObject;
+
+import org.openepics.seds.api.SedsValidator;
+
 import com.github.fge.jackson.JsonLoader;
 import com.github.fge.jsonschema.core.exceptions.ProcessingException;
 import com.github.fge.jsonschema.core.report.ProcessingReport;
 import com.github.fge.jsonschema.main.JsonSchema;
 import com.github.fge.jsonschema.main.JsonSchemaFactory;
-import java.io.File;
-import java.io.IOException;
-import javax.json.JsonObject;
-import org.openepics.seds.api.SedsValidator;
-import static org.openepics.seds.util.SedsException.assertNotNull;
 
 /**
  * Utility for validation of JSON schemas.
@@ -33,7 +36,7 @@
 public class ValidationUtil {
 
     //Type of check
-    //-------------------------------------------------------------------------- 
+    //--------------------------------------------------------------------------
     /**
      * General type describing what sort of SEDS data is represented (the meta
      * data, the raw data, or both).
@@ -53,10 +56,10 @@
          */
         SEDS_RAW
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Checks
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     /**
      * Fails with an exception if the JSON structure is invalid.
      *
@@ -117,10 +120,12 @@
      */
     @SuppressWarnings({"ThrowableResultIgnored", "ThrowableInstanceNotThrown", "ThrowableInstanceNeverThrown"})
     public static ProcessingReport validate(
-            File schema,
+            String schema,
+            String schemaPath,
             JsonObject instance
     ) throws SedsException {
-        assertNotNull(schema, File.class, "File for JSON schema");
+        assertNotNull(schema, String.class, "JSON schema");
+        assertNotNull(schemaPath, String.class, "a path to JSON schema");
         assertNotNull(instance, JsonObject.class, "JSON data being validated");
 
         try {
@@ -129,23 +134,23 @@
             );
         } catch (IOException | ProcessingException ex) {
             throw new SedsException("Error in reading/parsing the JSON Schema", ex)
-                    .attachSchema(schema)
+                    .attachSchemaPath(schemaPath)
                     .attachJson(instance);
         }
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Helper
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     private static JsonSchema schemaOf(
-            File schema
+            String schema
     ) throws ProcessingException, IOException {
-        assertNotNull(schema, File.class, "File for JSON schema");
+        assertNotNull(schema, String.class, "JSON schema");
 
         return JsonSchemaFactory
                 .byDefault()
-                .getJsonSchema(JsonLoader.fromFile(schema));
+                .getJsonSchema(JsonLoader.fromString(schema));
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
 }
diff --git a/seds-japi/src/main/java/org/openepics/seds/util/ValueUtil.java b/seds-japi/src/main/java/org/openepics/seds/util/ValueUtil.java
index a96e059..1ecd2d4 100644
--- a/seds-japi/src/main/java/org/openepics/seds/util/ValueUtil.java
+++ b/seds-japi/src/main/java/org/openepics/seds/util/ValueUtil.java
@@ -1,11 +1,11 @@
-/* 
+/*
  * This software is Copyright by the Board of Trustees of Michigan
  *  State University (c) Copyright 2013, 2014.
- *  
+ *
  *  You may use this software under the terms of the GNU public license
  *  (GPL). The terms of this license are described at:
  *    http://www.gnu.org/licenses/gpl.txt
- *  
+ *
  *  Contact Information:
  *       Facility for Rare Isotope Beam
  *       Michigan State University
@@ -14,13 +14,14 @@
  */
 package org.openepics.seds.util;
 
-import java.io.File;
-import java.net.URISyntaxException;
+import java.io.InputStream;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
+
 import javax.json.JsonObject;
+
 import org.openepics.seds.api.datatypes.SedsAlarm;
 import org.openepics.seds.api.datatypes.SedsControl;
 import org.openepics.seds.api.datatypes.SedsDisplay;
@@ -41,7 +42,7 @@
 public class ValueUtil {
 
     //Constants
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     /**
      * Protocol of the API.
      */
@@ -56,10 +57,10 @@
      * Encoding method of the API.
      */
     public static final String ENCODING = "UTF-8";
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Types
-    //-------------------------------------------------------------------------- 
+    //--------------------------------------------------------------------------
     /**
      * Mapping of names and types of the SEDS protocol.
      */
@@ -109,59 +110,63 @@
                 + Arrays.deepToString(TYPENAMES_GENERICS.keySet().toArray())
                 + "}";
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Documentation package
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     /**
      * Path specifying the location of the schema repository (JSON schema files
      * to use for validation).
      */
     public static final String SCHEMA_PATH = "schema/";
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Schema Files
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     /**
      * JSON schema file for a SEDS type JSON structure (containing meta data and
      * raw data).
      */
-    public static File SCHEMA_SEDS_TYPE;
+    public static final String SCHEMA_SEDS_TYPE;
+    public static final String SCHEMA_SEDS_TYPE_PATH = SCHEMA_PATH + "SEDS_type.json";
 
     /**
      * JSON schema file for a SEDS raw JSON structure (containing raw data).
      */
-    public static File SCHEMA_SEDS_RAW;
+    public static final String SCHEMA_SEDS_RAW;
+    public static final String SCHEMA_SEDS_RAW_PATH = SCHEMA_PATH + "SEDS_raw.json";
 
     /**
      * JSON schema file for a SEDS meta JSON structure (containing meta data).
      */
-    public static File SCHEMA_SEDS_META;
+    public static final String SCHEMA_SEDS_META;
+    public static final String SCHEMA_SEDS_META_PATH = SCHEMA_PATH + "SEDS_meta.json";
 
     static {
-        try {
-            final String path = SCHEMA_PATH;
-            final String ext = ".json";
+        ClassLoader loader = Thread.currentThread().getContextClassLoader();
+        SCHEMA_SEDS_TYPE = streamToString(loader.getResourceAsStream(SCHEMA_SEDS_TYPE_PATH));
+        SCHEMA_SEDS_RAW = streamToString(loader.getResourceAsStream(SCHEMA_SEDS_RAW_PATH));
+        SCHEMA_SEDS_META = streamToString(loader.getResourceAsStream(SCHEMA_SEDS_META_PATH));
+    }
 
-            ClassLoader loader = Thread.currentThread().getContextClassLoader();
-            SCHEMA_SEDS_TYPE = new File(loader.getResource(path + "SEDS_type" + ext).toURI());
-            SCHEMA_SEDS_RAW = new File(loader.getResource(path + "SEDS_raw" + ext).toURI());
-            SCHEMA_SEDS_META = new File(loader.getResource(path + "SEDS_meta" + ext).toURI());
-        } catch (URISyntaxException ex) {
-            throw new RuntimeException(ex);
+    private static String streamToString(InputStream jsonStream) {
+        // This uses the scanner to read the entire stream (file) as one token. It is a "read all" operation.
+        try(java.util.Scanner s = new java.util.Scanner(jsonStream)) {
+            return s.useDelimiter("\\A").hasNext() ? s.next() : "";
         }
     }
-    //--------------------------------------------------------------------------  
+
+    //--------------------------------------------------------------------------
 
     //Version Check
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     private static final String KEY_VERSION = "version";
 
     private static void assertVersion() throws Exception {
-        File[] files = new File[]{
-            SCHEMA_SEDS_TYPE,
-            SCHEMA_SEDS_RAW,
-            SCHEMA_SEDS_META
+        String[] files = {
+            SCHEMA_SEDS_TYPE_PATH,
+            SCHEMA_SEDS_RAW_PATH,
+            SCHEMA_SEDS_META_PATH
         };
 
         JsonObject[] schemas = new JsonObject[]{
@@ -180,7 +185,7 @@
                             + KEY_VERSION + ": "
                             + key
                             + "] in the schema file ["
-                            + files[i].getPath()
+                            + files[i]
                             + "] does not match the "
                             + "version of the Java API ["
                             + KEY_VERSION + ": "
@@ -194,7 +199,7 @@
             } catch (ClassCastException | NullPointerException e) {
                 throw new IllegalStateException(
                         "The schema file ["
-                        + files[i].getPath()
+                        + files[i]
                         + "] is missing the name-value pair "
                         + "for the name ["
                         + KEY_VERSION
@@ -215,10 +220,10 @@
             throw new RuntimeException(ex);
         }
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 
     //Helper
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
     private static class IEntry<K, V> implements Entry<K, V> {
 
         private final K key;
@@ -245,5 +250,5 @@
         }
 
     }
-    //--------------------------------------------------------------------------  
+    //--------------------------------------------------------------------------
 }